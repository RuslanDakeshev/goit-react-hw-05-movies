{"version":3,"file":"static/js/291.11579601.chunk.js","mappings":"uRAEaA,EAAOC,EAAAA,GAAAA,GAAH,mFASJC,GAHOD,EAAAA,GAAAA,GAAH,wBAGKA,EAAAA,GAAAA,EAAH,6FAMNE,EAAOF,EAAAA,GAAAA,EAAH,8F,SCXJG,EAAe,WAC1B,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMN,IAJFE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAqBH,GAASI,KAAKL,EACpC,GAAE,CAACC,IAEGF,EAIP,OACE,SAACN,EAAD,UACsB,IAAnBM,EAAQO,QACP,SAACV,EAAD,wCAEA,wBACGG,EAAQQ,KAAI,SAAAC,GACX,OACE,2BACE,UAACb,EAAD,yBACca,EAAOC,OADrB,IAC8B,IAC3BD,EAAOE,WAAWC,UAAU,EAAG,OAEjCH,EAAOI,UALDJ,EAAOK,GAQnB,OAKV,EAED,G,+LCvCMC,EAAM,mCAIL,SAAeC,IAAtB,+B,aAAO,O,oBAAA,qGACkBC,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASJ,EACTK,KAAM,MAJL,cACCC,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEAYA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA8BC,GAA9B,0FACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,GAAY,CAChDP,OAAQ,CACNC,QAASJ,EACTD,GAAIW,KAJH,uBACGH,EADH,EACGA,KADH,kBAOEA,GAPF,kEAYA,SAAeI,EAAtB,oC,aAAO,O,oBAAA,WAAiCC,EAASC,GAA1C,wFACkBX,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CACNC,QAASJ,EACTa,KAAAA,EACAC,MAAOF,KALN,cACCN,EADD,yBAQEA,EAASC,KAAKC,SARhB,kEAaA,SAAeO,EAAtB,kC,aAAO,O,oBAAA,WAAoCL,GAApC,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAA8B,CACxDP,OAAQ,CACNC,QAASJ,EACTD,GAAIW,KAJH,cACCJ,EADD,yBAOEA,EAASC,KAAKS,MAPhB,kEAYA,SAAe1B,EAAtB,+CAAO,OAAP,oBAAO,WAAoCoB,GAApC,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAA8B,CACxDP,OAAQ,CACNC,QAASJ,EACTD,GAAIW,KAJH,cACCJ,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEApDPN,EAAAA,EAAAA,SAAAA,QAAyB,8B","sources":["components/MovieReviews/MovieReviews.styled.jsx","components/MovieReviews/MovieReviews.jsx","services/eventsApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\n\nexport const Item = styled.li`\n`;\n\nexport const Author = styled.p`\n  margin-bottom: 8px;\n  font-size: 22px;\n  color: var(--accent);\n`;\n\nexport const Text = styled.p`\n  font-size: 16px;\n  color: var(--secondary);\n  line-height: 1.68;\n`;","import { useState, useEffect } from 'react';\nimport { fetchEventsByReviews } from 'services/eventsApi';\nimport { useParams } from 'react-router-dom';\nimport { List, Author, Text } from '../MovieReviews/MovieReviews.styled';\n\n\nexport const MovieReviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchEventsByReviews(movieId).then(setReviews);\n  }, [movieId]);\n    \n    if (!reviews) {\n        return;\n    }\n\n  return (\n    <List>\n      {reviews.length === 0 ? (\n        <Text>There are no reviews yet</Text>\n      ) : (\n        <ul>\n          {reviews.map(review => {\n            return (\n              <li key={review.id}>\n                <Author>\n                  Written by {review.author},{' '}\n                  {review.created_at.substring(0, 10)}\n                </Author>\n                {review.content}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </List>\n  );\n};\n\nexport default MovieReviews;","import axios from 'axios';\n\nconst KEY = '5c79cb68282b6d2568848c7dc97d0ef0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n//список самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport async function fetchEvents() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: KEY,\n      size: 20,\n    },\n  });\n  return response.data.results;\n}\n\n//пзапрос полной информации о фильме для страницы кинофильма.\n\nexport async function fetchEventById(movie_id) {\n  const { data } = await axios(`movie/${movie_id}`, {\n    params: {\n      api_key: KEY,\n      id: movie_id,\n    },\n  });\n  return data;\n}\n\n//поиск кинофильма по ключевому слову на странице фильмов.\n\nexport async function fetchEventsByName(keyword, page) {\n  const response = await axios('search/movie', {\n    params: {\n      api_key: KEY,\n      page,\n      query: keyword,\n    },\n  });\n  return response.data.results;\n}\n\n//запрос информации о актёрском составе для страницы кинофильма.\n\nexport async function fetchEventsByCredits(movie_id) {\n  const response = await axios(`movie/${movie_id}/credits`, {\n    params: {\n      api_key: KEY,\n      id: movie_id,\n    },\n  });\n  return response.data.cast;\n}\n\n//запрос обзоров для страницы кинофильма.\n\nexport async function fetchEventsByReviews(movie_id) {\n  const response = await axios(`movie/${movie_id}/reviews`, {\n    params: {\n      api_key: KEY,\n      id: movie_id,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["List","styled","Author","Text","MovieReviews","useState","reviews","setReviews","movieId","useParams","useEffect","fetchEventsByReviews","then","length","map","review","author","created_at","substring","content","id","KEY","fetchEvents","axios","params","api_key","size","response","data","results","fetchEventById","movie_id","fetchEventsByName","keyword","page","query","fetchEventsByCredits","cast"],"sourceRoot":""}