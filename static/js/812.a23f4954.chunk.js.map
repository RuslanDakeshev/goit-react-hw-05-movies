{"version":3,"file":"static/js/812.a23f4954.chunk.js","mappings":"uNAGaA,EAAYC,EAAAA,GAAAA,GAAH,2IASTC,EAAYD,EAAAA,GAAAA,GAAH,sLASTE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,yQAeTI,EAAWJ,EAAAA,GAAAA,IAAH,gHAMRK,EAAYL,EAAAA,GAAAA,EAAH,0K,SChCTM,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACV,EAAD,UACGQ,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,cAAeC,EAA7B,EAA6BA,YAA7B,OACV,SAACb,EAAD,WACE,UAACC,EAAD,CAAWa,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMT,GAA/C,WACE,SAACJ,EAAD,CAAUc,IAND,mCAMiBC,OAAOL,GAAcM,IAAI,MACnD,SAACf,EAAD,iBAAYO,QAAZ,IAAYA,EAAAA,EAASC,QAHTF,EADN,KAUjB,C,oJCvBYU,E,OAAOrB,GAAAA,IAAH,kI,SCIJsB,EAAW,WACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOhB,EAAP,KAAeiB,EAAf,KAIA,OAHAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAcC,KAAKH,EACpB,GAAE,IAEDjB,IACE,iCACE,SAACc,EAAD,oCACA,SAACf,EAAA,EAAD,CAAYC,OAAQA,MAI3B,EAED,G,+LCnBMqB,EAAM,mCAIL,SAAeF,IAAtB,+B,aAAO,O,oBAAA,qGACkBG,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASH,EACTI,KAAM,MAJL,cACCC,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEAYA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA8BC,GAA9B,0FACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,GAAY,CAChDP,OAAQ,CACNC,QAASH,EACTjB,GAAI0B,KAJH,uBACGH,EADH,EACGA,KADH,kBAOEA,GAPF,kEAYA,SAAeI,EAAtB,oC,aAAO,O,oBAAA,WAAiCC,EAASC,GAA1C,wFACkBX,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CACNC,QAASH,EACTY,KAAAA,EACAC,MAAOF,KALN,cACCN,EADD,yBAQEA,EAASC,KAAKC,SARhB,kEAaA,SAAeO,EAAtB,kC,aAAO,O,oBAAA,WAAoCL,GAApC,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAA8B,CACxDP,OAAQ,CACNC,QAASH,EACTjB,GAAI0B,KAJH,cACCJ,EADD,yBAOEA,EAASC,KAAKS,MAPhB,kEAYA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAoCP,GAApC,wFACkBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAA8B,CACxDP,OAAQ,CACNC,QAASH,EACTjB,GAAI0B,KAJH,cACCJ,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEApDPN,EAAAA,EAAAA,SAAAA,QAAyB,8B","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage/HomePage.styled.jsx","pages/HomePage/HomePage.jsx","services/eventsApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieList = styled.ul`\n  margin-bottom: 40px;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  gap: 20px;\n  \n`;\n\nexport const MovieItem = styled.li`\n  width: 210px;\n  background-color: #496785;\n  border-radius: 5px;\n  transition: 0.4s;\n  background-color: var(--bg);\n  box-shadow: var(--main-shadow);\n`;\n\nexport const MovieLink = styled(Link)`\n  object-fit: cover;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  &:hover img {\n    filter: grayscale(0);\n  }\n  &:hover p {\n    color: var(--accent);\n  }\n`;\n\nexport const MovieImg = styled.img`\n  margin-bottom: 5px;\n  filter: grayscale(0.4);\n  transition: all 200ms ease-in-out;\n`;\n\nexport const MovieName = styled.p`\n  height: 100%;\n  padding: 10px 8px;\n  font-weight: 500;\n  font-size: 18px;\n  transition: all 200ms ease-in-out;\n  color: var(--secondary);\n`;","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  MovieList,\n  MovieItem,\n  MovieLink,\n  MovieImg,\n  MovieName,\n} from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  const imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\n  return (\n    <MovieList>\n      {movies.map(({ id, title, original_name, poster_path }) => (\n        <MovieItem key={id}>\n          <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            <MovieImg src={imgBaseUrl.concat(poster_path)} alt=\"\" />\n            <MovieName>{title ?? original_name}</MovieName>\n          </MovieLink>\n        </MovieItem>\n      ))}\n    </MovieList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Text = styled.div`\n  margin-bottom: 30px;\n  text-align: center;\n  color: black;\n  font-size: 1.7em;\n  font-weight: 600;\n`;","\nimport { useEffect, useState } from 'react';\nimport { fetchEvents } from 'services/eventsApi';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Text } from './HomePage.styled';\n\nexport const HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    fetchEvents().then(setMovies);\n  }, []);\n  return (\n    movies && (\n      <>\n        <Text>Popular Movies Today</Text>\n        <MoviesList movies={movies} />\n      </>\n    )\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst KEY = '5c79cb68282b6d2568848c7dc97d0ef0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n//список самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport async function fetchEvents() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: KEY,\n      size: 20,\n    },\n  });\n  return response.data.results;\n}\n\n//пзапрос полной информации о фильме для страницы кинофильма.\n\nexport async function fetchEventById(movie_id) {\n  const { data } = await axios(`movie/${movie_id}`, {\n    params: {\n      api_key: KEY,\n      id: movie_id,\n    },\n  });\n  return data;\n}\n\n//поиск кинофильма по ключевому слову на странице фильмов.\n\nexport async function fetchEventsByName(keyword, page) {\n  const response = await axios('search/movie', {\n    params: {\n      api_key: KEY,\n      page,\n      query: keyword,\n    },\n  });\n  return response.data.results;\n}\n\n//запрос информации о актёрском составе для страницы кинофильма.\n\nexport async function fetchEventsByCredits(movie_id) {\n  const response = await axios(`movie/${movie_id}/credits`, {\n    params: {\n      api_key: KEY,\n      id: movie_id,\n    },\n  });\n  return response.data.cast;\n}\n\n//запрос обзоров для страницы кинофильма.\n\nexport async function fetchEventsByReviews(movie_id) {\n  const response = await axios(`movie/${movie_id}/reviews`, {\n    params: {\n      api_key: KEY,\n      id: movie_id,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["MovieList","styled","MovieItem","MovieLink","Link","MovieImg","MovieName","MoviesList","movies","location","useLocation","map","id","title","original_name","poster_path","to","state","from","src","concat","alt","Text","HomePage","useState","setMovies","useEffect","fetchEvents","then","KEY","axios","params","api_key","size","response","data","results","fetchEventById","movie_id","fetchEventsByName","keyword","page","query","fetchEventsByCredits","cast","fetchEventsByReviews"],"sourceRoot":""}