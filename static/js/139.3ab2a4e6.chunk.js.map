{"version":3,"file":"static/js/139.3ab2a4e6.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/SearchMoviesPage/SearchMoviesPage.styled.jsx","pages/SearchMoviesPage/SearchMoviesPage.jsx","services/eventsApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieList = styled.ul`\n  margin-bottom: 40px;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  gap: 20px;\n  \n`;\n\nexport const MovieItem = styled.li`\n  width: 210px;\n  background-color: #496785;\n  border-radius: 5px;\n  transition: 0.4s;\n  background-color: var(--bg);\n  box-shadow: var(--main-shadow);\n`;\n\nexport const MovieLink = styled(Link)`\n  object-fit: cover;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  &:hover img {\n    filter: grayscale(0);\n  }\n  &:hover p {\n    color: var(--accent);\n  }\n`;\n\nexport const MovieImg = styled.img`\n  margin-bottom: 5px;\n  filter: grayscale(0.4);\n  transition: all 200ms ease-in-out;\n`;\n\nexport const MovieName = styled.p`\n  height: 100%;\n  padding: 10px 8px;\n  font-weight: 500;\n  font-size: 18px;\n  transition: all 200ms ease-in-out;\n  color: var(--secondary);\n`;","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  MovieList,\n  MovieItem,\n  MovieLink,\n  MovieImg,\n  MovieName,\n} from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  // const imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\n  const getImgUrl = image => {\n    if (image === null) {\n      return 'https://img.icons8.com/pastel-glyph/512/film-reel--v2.png';\n    }\n    return `https://image.tmdb.org/t/p/w300${image}`;\n  };\n  return (\n    <MovieList>\n      {movies.map(({ id, title, original_name, poster_path }) => (\n        <MovieItem key={id}>\n          <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            <MovieImg src={getImgUrl(poster_path)} alt=\"\" />\n            <MovieName>{title ?? original_name}</MovieName>\n          </MovieLink>\n        </MovieItem>\n      ))}\n    </MovieList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-bottom: 20px;\n  display: flex;\n  gap: 20px;\n`;\n\nexport const Input = styled.input`\n  padding: 13px 20px;\n  width: 300px;\n  border-radius: 4px;\n  font-size: 18px;\n  color: var(--secondary);\n  box-shadow: var(--inset-shadow);\n  border: none;\n  :focus {\n    outline: 3px solid var(--bg);\n    box-shadow: 0px 0px 0px 6px var(--accent);\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 8px 14px;\n  font-weight: 700;\n  font-size: 22px;\n  border-radius: 4px;\n  border: none;\n  color: var(--accent);\n  background-color: var(--bg);\n  box-shadow: var(--main-shadow);\n  transition: all 200ms ease-in-out;\n  cursor: pointer;\n  :hover,\n  :focus-visible {\n    color: var(--bg);\n    background-color: var(--accent);\n  }\n  :focus {\n    outline: 3px solid var(--bg);\n    box-shadow: 0px 0px 0px 6px var(--accent);\n  }\n`;","import { fetchEventsByName } from 'services/eventsApi';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, Outlet } from 'react-router-dom';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Form, Input, Button } from './SearchMoviesPage.styled';\n\nexport const SearchMoviesPage = () => {\n  const [page, setPage] = useState(1);\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('moviename');\n\n  useEffect(() => {\n    if (query === null || query === '') return;\n    async function fetchEvents() {\n      const data = await fetchEventsByName(query, page);\n      setMovies(data);\n    }\n    fetchEvents();\n  }, [query, page]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setPage(1);\n    const form = event.target;\n    setSearchParams({ moviename: form.elements.query.value });\n    form.reset();\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Input\n          name=\"query\"\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"Search for movies...\"\n        />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n\n      {/* <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" />\n        <button>Search</button>\n      </form> */}\n\n      {movies && <MoviesList movies={movies} />}\n      <Outlet />\n    </>\n  );\n};\n\nexport default SearchMoviesPage;\n","import axios from 'axios';\n\nconst KEY = '5c79cb68282b6d2568848c7dc97d0ef0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n//список самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport async function fetchEvents() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: KEY,\n      size: 20,\n    },\n  });\n  return response.data.results;\n}\n\n//пзапрос полной информации о фильме для страницы кинофильма.\n\nexport async function fetchEventById(movie_id) {\n  const { data } = await axios(`movie/${movie_id}`, {\n    params: {\n      api_key: KEY,\n      id: movie_id,\n    },\n  });\n  return data;\n}\n\n//поиск кинофильма по ключевому слову на странице фильмов.\n\nexport async function fetchEventsByName(keyword, page) {\n  const response = await axios('search/movie', {\n    params: {\n      api_key: KEY,\n      page,\n      query: keyword,\n    },\n  });\n  return response.data.results;\n}\n\n//запрос информации о актёрском составе для страницы кинофильма.\n\nexport async function fetchEventsByCredits(movie_id) {\n  const response = await axios(`movie/${movie_id}/credits`, {\n    params: {\n      api_key: KEY,\n      id: movie_id,\n    },\n  });\n  return response.data.cast;\n}\n\n//запрос обзоров для страницы кинофильма.\n\nexport async function fetchEventsByReviews(movie_id) {\n  const response = await axios(`movie/${movie_id}/reviews`, {\n    params: {\n      api_key: KEY,\n      id: movie_id,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["MovieList","styled","MovieItem","MovieLink","Link","MovieImg","MovieName","MoviesList","movies","location","useLocation","map","image","id","title","original_name","poster_path","to","state","from","src","alt","Form","Input","Button","SearchMoviesPage","useState","page","setPage","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchEventsByName","data","fetchEvents","onSubmit","event","preventDefault","form","target","moviename","elements","value","reset","name","type","autoComplete","placeholder","KEY","axios","params","api_key","size","response","results","fetchEventById","movie_id","keyword","fetchEventsByCredits","cast","fetchEventsByReviews"],"sourceRoot":""}